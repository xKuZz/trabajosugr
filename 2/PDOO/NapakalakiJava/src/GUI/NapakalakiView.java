/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import java.awt.Dimension;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import napakalakiGame.CombatResult;
import napakalakiGame.Napakalaki;
/**
 *
 * @author xkuzz
 */
public class NapakalakiView extends javax.swing.JFrame {
  private Napakalaki napakalakiModel;
  /**
   * Creates new form NapakalakiView
   */
  public NapakalakiView() {
    initComponents();
    monsterView.setVisible(false);
    CombatButton.setEnabled(false);
    nextTurnButton.setEnabled(false);
    playerView.setNapView(this);
    
  }
  
  public void setNapakalaki(Napakalaki nap){
    napakalakiModel = nap;
    playerView.setNapakalaki(nap);
    monsterView.setMonster(napakalakiModel.getCurrentMonster());
    playerView.setPlayer(nap.getCurrentPlayer());
    playerView.letDiscards(false);
    repaint();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerView = new GUI.PlayerView();
        monsterView = new GUI.MonsterView();
        meetMonsterButton = new javax.swing.JButton();
        CombatButton = new javax.swing.JButton();
        nextTurnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Napakalaki");
        setMaximumSize(new java.awt.Dimension(0, 0));
        setMinimumSize(new java.awt.Dimension(998, 473));
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(new java.awt.FlowLayout());
        getContentPane().add(playerView);
        getContentPane().add(monsterView);

        meetMonsterButton.setText("Meet the Monster");
        meetMonsterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meetMonsterButtonActionPerformed(evt);
            }
        });
        getContentPane().add(meetMonsterButton);

        CombatButton.setText("Combat");
        CombatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CombatButtonActionPerformed(evt);
            }
        });
        getContentPane().add(CombatButton);

        nextTurnButton.setText("Next Turn");
        nextTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTurnButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nextTurnButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents
  public void checkNextTurn() {
    if (napakalakiModel.getCurrentPlayer().getPendingBadConsequence() == null ||
        napakalakiModel.getCurrentPlayer().getPendingBadConsequence().isEmpty()) {
        nextTurnButton.setEnabled(true);
        CombatButton.setEnabled(false);
    }
           
  }
  private void meetMonsterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meetMonsterButtonActionPerformed
    // TODO add your handling code here:
    monsterView.setVisible(true);
    meetMonsterButton.setEnabled(false);
    playerView.letDiscards(false);
    CombatButton.setEnabled(true);
    playerView.letEquip(false);
    playerView.setPlayer(napakalakiModel.getCurrentPlayer());
  }//GEN-LAST:event_meetMonsterButtonActionPerformed

  private void CombatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CombatButtonActionPerformed
   CombatResult cr = napakalakiModel.developCombat();
   if (cr == CombatResult.WINGAME)
       JOptionPane.showMessageDialog(null, "HAS GANADO");
   else {
   if ((napakalakiModel.getCurrentPlayer().getPendingBadConsequence() == null ||
       napakalakiModel.getCurrentPlayer().getPendingBadConsequence().isEmpty()) &&
       napakalakiModel.getCurrentPlayer().getHiddenTreasures().size() <= 4)
       nextTurnButton.setEnabled(true);
   playerView.letDiscards(true);
   CombatButton.setEnabled(false);
   playerView.setPlayer(napakalakiModel.getCurrentPlayer());
   repaint();
   }
   
  }//GEN-LAST:event_CombatButtonActionPerformed
    
  public void letNextTurn(boolean permitir) {
      nextTurnButton.setEnabled(permitir);
  }
    private void nextTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTurnButtonActionPerformed
       nextTurnButton.setEnabled(false);
       meetMonsterButton.setEnabled(true);
       napakalakiModel.nextTurn();
       monsterView.setVisible(false);
       monsterView.setMonster(napakalakiModel.getCurrentMonster());
       playerView.letEquip(true);
       playerView.setPlayer(napakalakiModel.getCurrentPlayer());
       repaint();
    }//GEN-LAST:event_nextTurnButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CombatButton;
    private javax.swing.JButton meetMonsterButton;
    private GUI.MonsterView monsterView;
    private javax.swing.JButton nextTurnButton;
    private GUI.PlayerView playerView;
    // End of variables declaration//GEN-END:variables
}
