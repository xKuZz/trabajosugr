/* Copyright 2007 Theodore S. Norvell. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,      this list of conditions and the following disclaimer.   2. Redistributions in binary form must reproduce the above copyright notice,      this list of conditions and the following disclaimer in the documentation      and/or other materials provided with the distribution.   3. Neither the source nor binary form shall be included in any product used by      or intended for use by any military organization. THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITYAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THEODORENORVELL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, ORCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTEGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USEOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package monitor;/** A semaphore. *  TBD. Ensure the queue is fair. *  TBD. Should it be possible to interrupt a waiting thread? *  TBD. Can notifications be lost? *  */public class Semaphore{    int s ;    public Semaphore( int initial_value ) {    	Assertion.check( initial_value >= 0 ) ;        this.s = initial_value ; }    /** The P operation */    public synchronized void acquire() {        while( s == 0 ) {            try { wait() ; }            catch( InterruptedException e ) { } }        --s ; }    /** The V operation */    public synchronized void release() {        ++s ;        notify() ; }}